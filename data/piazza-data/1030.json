{"aid": "j0zezzo6une5o4", "result": {"status": "active", "unique_views": 4, "request_instructor_me": false, "change_log": [{"type": "create", "anon": "no", "when": "2017-04-01T13:31:51Z", "data": "j0zargqorc8782", "uid": "hcrrjuyequh4bt"}, {"type": "update", "anon": "no", "when": "2017-04-01T13:36:00Z", "data": "j0zawt4bu9c113", "uid": "hcrrjuyequh4bt"}], "upvote_ids": [], "id": "j0zargqmph781", "bookmarked": 4, "tags": ["instructor-note", "lecture10", "lecture11", "lecture12", "lecture8", "lecture9"], "i_edits": [], "is_bookmarked": false, "children": [], "nr": 1030, "bucket_order": 2, "type": "note", "folders": ["lecture8", "lecture9", "lecture10", "lecture11", "lecture12"], "no_answer_followup": 0, "num_favorites": 0, "bucket_name": "Today", "q_edits": [], "data": {"embed_links": []}, "request_instructor": 0, "created": "2017-04-01T13:31:51Z", "is_tag_good": false, "config": {}, "s_edits": [], "my_favorite": false, "default_anonymity": "no", "t": 1491060627798, "tag_good": [], "tag_good_arr": [], "history": [{"content": "<p>lec12</p>\n<p>=============</p>\n<p>1&#xff08;不用回答&#xff09;理解 孤儿进程和僵死进程的含义<br />http://www.cnblogs.com/xiehongfeng100/p/4619913.html<br />http://www.cnblogs.com/Anker/p/3271773.html<br />https://piazza.com/class/i5j09fnsl7k5x0?cid=753<br /><br />2&#xff08;不用回答&#xff09;理解ucore进程控制块proc_struct数据结构内容和大致含义<br /><br />3&#xff08;不用回答&#xff09;理解fork和execv的实现机制<br /><br />4&#xff08;不用回答&#xff09;理解COW的实现机制<br />http://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html <br /><br />5 请仔细阅读https://chyyuu.gitbooks.io/os_course_exercises/content/all/05-2-spoc-discussion.html 中的小组思考题<br /><br />设计一个简化的进程管理子系统&#xff0c;可以管理并调度如下简化进程.给出了参考代码&#xff08;https://github.com/chyyuu/ucore_lab/blob/master/related_info/lab5/process-cpuio-homework.py&#xff09;&#xff0c;请理解代码&#xff0c;并完成&#xff02;YOUR CODE&#34;部分的内容&#xff0e;</p>\n<p></p>\n<p></p>\n<p>lec10&amp;11</p>\n<p>=============</p>\n<p>1 以lab3为例&#xff0c;说明虚拟页与磁盘后备页面的对应关系是什么&#xff1f;<br />2 &#xff08;不用回答&#xff09;以lab4为例&#xff0c;理解保存现场和恢复现场&#xff1a; lab4/kern/process/switch.S <br />3 &#xff08;不用回答&#xff09;理解进程的各种状态和各种状态间的转换的起因。<br />4 由于何种原因&#xff0c;可出现进程的何种状态转到退出状态&#xff1f;<br />5 请设计一个简化的进程管理子系统&#xff0c;可以管理并调度如下简化进程.给出了参考代码&#xff08;https://github.com/chyyuu/ucore_lab/blob/master/related_info/lab4/process-concept-homework.py&#xff09;&#xff0c;请理解代码&#xff0c;并完成&#xff02;YOUR CODE&#34;部分的内容。<br />6 &#xff08;不用回答&#xff09;请了解实际操作系统Linux的各种状态和各种状态间的转换的起因。<br />7 (不用回答)请了解实际操作系统Linux的进程控制块PCB数据结构 task_struct</p>\n<p></p>\n<p>lec9</p>\n<p>=============</p>\n<p>1. 物理页帧数量为3&#xff0c;且初始时没有对应的虚拟页。虚拟页访问序列为 0,1,2,0,1,3,0,3,1,0,3&#xff0c;请问采用最优置换算法的缺页次数为&#xff08;&#xff09;<br /><br />2. 物理页帧数量为3&#xff0c;且初始时没有对应的虚拟页。虚拟页访问序列为 0,1,2,0,1,3,0,3,1,0,3&#xff0c;请问采用FIFO置换算法的缺页次数为&#xff08;&#xff09;<br /><br />3.物理页帧数量为4&#xff0c;且初始时没有对应的虚拟页。虚拟页访问序列为 0,3,2,0,1,3,4,3,1,0,3,2,1,3,4 &#xff0c;请问采用CLOCK置换算法&#xff08;用1个bit表示存在时间&#xff09;的缺页次数为&#xff08;&#xff09;<br /><br />4. 物理页帧数量为4&#xff0c;且初始时没有对应的虚拟页。虚拟页访问序列为 0,3,2,0,1,3,4,3,1,0,3,2,1,3,4 &#xff0c;请问采用CLOCK置换算法&#xff08;用2个关联&#xff0c;bit表示存在时间,可以表示4,&#xff09;的缺页次数为&#xff08;&#xff09;<br /><br />https://github.com/chyyuu/os_course_exercises/blob/master/all/04-2-spoc-discussion.md#小组思考题目<br />的第一和第二道题目<br /><br />5.&#xff08;spoc&#xff09;根据你的学号 mod 4的结果值&#xff0c;确定选择四种页面置换算法&#xff08;0&#xff1a;LRU置换算法&#xff0c;1:改进的clock 页置换算法&#xff0c;2&#xff1a;工作集页置换算法&#xff0c;3&#xff1a;缺页率置换算法&#xff09;中的一种来设计一个应用程序&#xff08;可基于python, ruby, C, C&#43;&#43;&#xff0c;LISP等&#xff09;模拟实现&#xff0c;并给出测试用例和测试结果。请参考如python代码或独自实现。<br /><br />页置换算法实现的参考实例 &#xff08; https://github.com/chyyuu/ucore_lab/blob/master/related_info/lab3/page-replacement-policy.py &#xff09;<br /><br />6. 请判断OPT、LRU、FIFO、Clock和LFU等各页面置换算法是否存在Belady现象&#xff1f;如果存在&#xff0c;给出实例&#xff1b;如果不存在&#xff0c;给出证明。<br /><br /></p>\n<p></p>\n<p>lec8</p>\n<p>=============<br />04-1-spoc-discussion.md <br />的个人思考题&#xff0c;小组思考题(1)(2)(3)</p>", "anon": "no", "created": "2017-04-01T13:36:00Z", "uid": "hcrrjuyequh4bt", "subject": "部分课后练习"}, {"content": "<p>lec12</p>\n<p>=============</p>\n<p>1&#xff08;不用回答&#xff09;理解 孤儿进程和僵死进程的含义<br />http://www.cnblogs.com/xiehongfeng100/p/4619913.html<br />http://www.cnblogs.com/Anker/p/3271773.html<br />https://piazza.com/class/i5j09fnsl7k5x0?cid=753<br /><br />2&#xff08;不用回答&#xff09;理解ucore进程控制块proc_struct数据结构内容和大致含义<br /><br />3&#xff08;不用回答&#xff09;理解fork和execv的实现机制<br /><br />4 请仔细阅读https://chyyuu.gitbooks.io/os_course_exercises/content/all/05-2-spoc-discussion.html 中的小组思考题<br /><br />设计一个简化的进程管理子系统&#xff0c;可以管理并调度如下简化进程.给出了参考代码&#xff08;https://github.com/chyyuu/ucore_lab/blob/master/related_info/lab5/process-cpuio-homework.py&#xff09;&#xff0c;请理解代码&#xff0c;并完成&#xff02;YOUR CODE&#34;部分的内容&#xff0e;</p>\n<p></p>\n<p></p>\n<p>lec10&amp;11</p>\n<p>=============</p>\n<p>1 以lab3为例&#xff0c;说明虚拟页与磁盘后备页面的对应关系是什么&#xff1f;<br />2 &#xff08;不用回答&#xff09;以lab4为例&#xff0c;理解保存现场和恢复现场&#xff1a; lab4/kern/process/switch.S <br />3 &#xff08;不用回答&#xff09;理解进程的各种状态和各种状态间的转换的起因。<br />4 由于何种原因&#xff0c;可出现进程的何种状态转到退出状态&#xff1f;<br />5 请设计一个简化的进程管理子系统&#xff0c;可以管理并调度如下简化进程.给出了参考代码&#xff08;https://github.com/chyyuu/ucore_lab/blob/master/related_info/lab4/process-concept-homework.py&#xff09;&#xff0c;请理解代码&#xff0c;并完成&#xff02;YOUR CODE&#34;部分的内容。<br />6 &#xff08;不用回答&#xff09;请了解实际操作系统Linux的各种状态和各种状态间的转换的起因。<br />7 (不用回答)请了解实际操作系统Linux的进程控制块PCB数据结构 task_struct </p>\n<p></p>\n<p>lec9</p>\n<p>=============</p>\n<p>1. 物理页帧数量为3&#xff0c;且初始时没有对应的虚拟页。虚拟页访问序列为 0,1,2,0,1,3,0,3,1,0,3&#xff0c;请问采用最优置换算法的缺页次数为&#xff08;&#xff09;<br /><br />2. 物理页帧数量为3&#xff0c;且初始时没有对应的虚拟页。虚拟页访问序列为 0,1,2,0,1,3,0,3,1,0,3&#xff0c;请问采用FIFO置换算法的缺页次数为&#xff08;&#xff09;<br /><br />3.物理页帧数量为4&#xff0c;且初始时没有对应的虚拟页。虚拟页访问序列为 0,3,2,0,1,3,4,3,1,0,3,2,1,3,4 &#xff0c;请问采用CLOCK置换算法&#xff08;用1个bit表示存在时间&#xff09;的缺页次数为&#xff08;&#xff09;<br /><br />4. 物理页帧数量为4&#xff0c;且初始时没有对应的虚拟页。虚拟页访问序列为 0,3,2,0,1,3,4,3,1,0,3,2,1,3,4 &#xff0c;请问采用CLOCK置换算法&#xff08;用2个关联&#xff0c;bit表示存在时间,可以表示4,&#xff09;的缺页次数为&#xff08;&#xff09;<br /><br />https://github.com/chyyuu/os_course_exercises/blob/master/all/04-2-spoc-discussion.md#小组思考题目<br />的第一和第二道题目<br /><br />5.&#xff08;spoc&#xff09;根据你的学号 mod 4的结果值&#xff0c;确定选择四种页面置换算法&#xff08;0&#xff1a;LRU置换算法&#xff0c;1:改进的clock 页置换算法&#xff0c;2&#xff1a;工作集页置换算法&#xff0c;3&#xff1a;缺页率置换算法&#xff09;中的一种来设计一个应用程序&#xff08;可基于python, ruby, C, C&#43;&#43;&#xff0c;LISP等&#xff09;模拟实现&#xff0c;并给出测试用例和测试结果。请参考如python代码或独自实现。<br /><br />页置换算法实现的参考实例 &#xff08; https://github.com/chyyuu/ucore_lab/blob/master/related_info/lab3/page-replacement-policy.py &#xff09;<br /><br />6. 请判断OPT、LRU、FIFO、Clock和LFU等各页面置换算法是否存在Belady现象&#xff1f;如果存在&#xff0c;给出实例&#xff1b;如果不存在&#xff0c;给出证明。<br /><br /></p>\n<p></p>\n<p>lec8</p>\n<p>=============<br />04-1-spoc-discussion.md <br />的个人思考题&#xff0c;小组思考题(1)(2)(3)</p>", "anon": "no", "created": "2017-04-01T13:31:51Z", "uid": "hcrrjuyequh4bt", "subject": "部分课后练习"}]}, "error": null}