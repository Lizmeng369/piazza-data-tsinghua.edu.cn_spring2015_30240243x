{"error": null, "result": {"nr": 438, "upvote_ids": [], "change_log": [{"type": "create", "when": "2015-05-18T06:02:13Z", "uid": "hdjonbiyfs62ie", "data": "i9thik4kpc545f", "anon": "no"}, {"type": "followup", "to": "i9thik4in7a45e", "when": "2015-05-18T06:06:03Z", "uid": "i6vkh2uqu3V", "anon": "no"}, {"type": "followup", "to": "i9thik4in7a45e", "when": "2015-05-18T06:15:37Z", "uid": "i6rgda76fc66q4", "anon": "no"}, {"type": "followup", "to": "i9thik4in7a45e", "when": "2015-05-18T06:16:28Z", "uid": "i6uaz13iyeM", "anon": "no"}, {"type": "followup", "to": "i9thik4in7a45e", "when": "2015-05-18T06:21:03Z", "uid": "i6t6y9snjx2", "anon": "no"}, {"type": "followup", "to": "i9thik4in7a45e", "when": "2015-05-18T06:21:21Z", "uid": "i6roqnlkmtw", "anon": "no"}, {"type": "followup", "to": "i9thik4in7a45e", "when": "2015-05-18T06:33:09Z", "uid": "hs2sszu8rbz6jj", "anon": "no"}, {"type": "followup", "to": "i9thik4in7a45e", "when": "2015-05-18T06:34:25Z", "uid": "hs2sszr363d6jd", "anon": "no"}, {"type": "feedback", "to": "i9thik4in7a45e", "when": "2015-05-18T06:34:49Z", "uid": "hs2sszr363d6jd", "anon": "no"}, {"type": "feedback", "to": "i9thik4in7a45e", "when": "2015-05-18T07:05:35Z", "uid": "i6t6y9snjx2", "anon": "no"}, {"type": "followup", "to": "i9thik4in7a45e", "when": "2015-05-18T07:23:10Z", "uid": "i718aanx0OS", "anon": "no"}, {"type": "feedback", "to": "i9thik4in7a45e", "when": "2015-05-18T10:35:14Z", "uid": "i6uaz13iyeM", "anon": "no"}, {"type": "feedback", "to": "i9thik4in7a45e", "when": "2015-05-18T11:04:35Z", "uid": "i718aanx0OS", "anon": "no"}], "q_edits": [], "i_edits": [], "unique_views": 64, "bookmarked": 10, "config": {}, "history": [{"subject": "第22讲实验八的课堂练习回答", "content": "<p>请参加课堂讨论的同学在这里回复要求你回答的问题。</p>", "created": "2015-05-18T06:02:13Z", "uid": "hdjonbiyfs62ie", "anon": "no"}], "data": {"embed_links": []}, "request_instructor_me": false, "folders": ["课堂问答"], "type": "note", "tag_good": [], "tag_good_arr": [], "created": "2015-05-18T06:02:13Z", "t": 1433500543469, "id": "i9thik4in7a45e", "status": "active", "default_anonymity": "no", "my_favorite": false, "bucket_order": 2, "is_bookmarked": false, "is_tag_good": false, "bucket_name": "Today", "no_answer_followup": 8, "children": [{"no_upvotes": 0, "uid": "i6vkh2uqu3V", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T06:06:03Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p>滕爽 2012011270</p>\n<pre>void vfs_init(void);\nvoid vfs_cleanup(void);\nvoid vfs_devlist_init(void);<br />int vfs_set_curdir(struct inode *dir);\nint vfs_get_curdir(struct inode **dir_store);\nint vfs_get_root(const char *devname, struct inode **root_store);\nconst char *vfs_get_devname(struct fs *fs);<br />int vfs_open(char *path, uint32_t open_flags, struct inode **inode_store);\nint vfs_close(struct inode *node);\nint vfs_link(char *old_path, char *new_path);\nint vfs_symlink(char *old_path, char *new_path);\nint vfs_readlink(char *path, struct iobuf *iob);\nint vfs_mkdir(char *path);\nint vfs_unlink(char *path);\nint vfs_rename(char *old_path, char *new_path);\nint vfs_chdir(char *path);\nint vfs_getcwd(struct iobuf *iob);<br />int vfs_lookup(char *path, struct inode **node_store);\nint vfs_lookup_parent(char *path, struct inode **node_store, char **endp);<br />int vfs_set_bootfs(char *fsname);\nint vfs_get_bootfs(struct inode **node_store);\n\nint vfs_add_fs(const char *devname, struct fs *fs);\nint vfs_add_dev(const char *devname, struct inode *devnode, bool mountable);\n\nint vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store));\nint vfs_unmount(const char *devname);\nint vfs_unmount_all(void);</pre>\n<p></p>", "children": [], "type": "followup", "no_answer": 1, "created": "2015-05-18T06:06:03Z", "id": "i9thni4gx6546g"}, {"no_upvotes": 0, "uid": "i6rgda76fc66q4", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T06:15:37Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p>1. 文件支持的操作&#xff1a;创建文件&#xff0c;打开文件&#xff0c;关闭文件&#xff0c;读取文件&#xff0c;写入文件&#xff0c;获取文件类型(gettype)&#xff0c;尝试移动文件指针(tryseek)&#xff0c;强制写回脏数据(fsync)&#xff0c;截断文件(truncate)等。</p>\n<p></p>\n<p>μcore文件操作主要函数调用流程&#xff08;以用户态程序读文件为例&#xff09;&#xff1a;</p>\n<p></p>\n<p>用户态</p>\n<p>sysread(int, void*, size_t);</p>\n<p>syscall(int, int, void*, size_t);</p>\n<p>内核态</p>\n<p>__alltraps</p>\n<p>trap(struct trapframe*);</p>\n<p>trap_dispatch(struct trapframe*);</p>\n<p>syscall();</p>\n<p>sys_read(uint32_t[]);</p>\n<p>sysfile_read(int, void*, size_t);</p>\n<p>file_read(int, void*, size_t, size)t);</p>\n<p>vop_read(struct inode*, struct iobuf*);</p>\n<p>sfs_read(struct inode*, struct iobuf*);</p>\n<p>sfs_io(struct inode*, struct iobuf*, bool);</p>\n<p>sfs_io_nolock(struct sfs_fs*, struct sfs_inode*, void*, off_t, size_t, bool);</p>\n<p>sfs_rblock(struct sfs_fs*, void*, uint32_t, uint32_t);</p>\n<p>sfs_rwblock(struct sfs_fs*, void*, uint32_t, uint32_t, bool);</p>\n<p>sfs_rwblock_nolock(struct sfs_fs*, void*, uint32_t, bool, bool);</p>\n<p>disk0_io(struct device*, struct iobuf*, bool);</p>\n<p>disk0_read_blks_nolock(uint32_t, uint32_t);</p>\n<p>ide_read_secs(unsigned short, uint32_t, void*, size_t);</p>\n<p>(inline assembly) </p>\n<p></p>", "children": [], "type": "followup", "no_answer": 1, "created": "2015-05-18T06:15:37Z", "id": "i9thzsns3wb1z6"}, {"no_upvotes": 0, "uid": "i6uaz13iyeM", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T06:16:28Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p></p><pre>董欣 计25 2012011361<br />int sys_open(const char *path, uint32_t open_flags);\nint sys_close(int fd);\nint sys_read(int fd, void *base, size_t len);\nint sys_write(int fd, void *base, size_t len);\nint sys_seek(int fd, off_t pos, int whence);\nint sys_fstat(int fd, struct stat *stat);\nint sys_fsync(int fd);\nint sys_getcwd(char *buffer, size_t len);\nint sys_getdirentry(int fd, struct dirent *dirent);\nint sys_dup(int fd1, int fd2);</pre>\n<p></p>", "children": [{"uid": "i6uaz13iyeM", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T10:35:14Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p>如果从磁盘读取文件的话&#xff0c;是如下过程&#xff1a;</p>\n<pre>This is func sysfile_read in kern/sysfile.c!\nThis is func file_read in kern/fs/file.c!\nThis is func vop_read in func file_read!\nThis is func sfs_read in kern/fs/sfs/sfs_inode.c!\nThis is func sfs_io in kern/fs/sfs/sfs_inode.c!\nThis is func sfs_io_nolock in kern/fs/sfs/sfs_inode.c!\nThis is func sfs_rwblock_nolock in kern/fs/sfs/sfs_io.c!\nThis is func disk0_io in kern/fs/devs/dev_disk0.c!\nThis is func disk0_read_blks_nolock in kern/fs/devs/dev_disk0.c</pre>\n<p>如果从stdin设备文件即键盘读取&#xff0c;是&#xff1a;</p>\n<pre>This is func read in user/libs/file.c!\nThis is func sys_read in kern/syscall.c!\nThis is func sysfile_read in kern/sysfile.c!\nThis is func file_read in kern/fs/file.c!\nThis is func vop_read in func file_read!\nThis is func dev_read in kern/fs/devs/dev.c!\nThis is func stdin_io in kern/fs/devs/dev_stdin.c!\nThis is func dev_stdin_read in kern/fs/devs/dev_stdin.c!</pre>\n<p></p>", "children": [], "type": "feedback", "created": "2015-05-18T10:35:14Z", "id": "i9tr9nspl9m3b9"}], "type": "followup", "no_answer": 1, "created": "2015-05-18T06:16:28Z", "id": "i9ti0wb2d4o6zn"}, {"no_upvotes": 0, "uid": "i6t6y9snjx2", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T06:21:03Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p>    unsigned long vop_magic;<br />    int (*vop_open)(struct inode *node, uint32_t open_flags);<br />    int (*vop_close)(struct inode *node);<br />    int (*vop_read)(struct inode *node, struct iobuf *iob);<br />    int (*vop_write)(struct inode *node, struct iobuf *iob);<br />    int (*vop_fstat)(struct inode *node, struct stat *stat);<br />    int (*vop_fsync)(struct inode *node);<br />    int (*vop_namefile)(struct inode *node, struct iobuf *iob);<br />    int (*vop_getdirentry)(struct inode *node, struct iobuf *iob);<br />    int (*vop_reclaim)(struct inode *node);<br />    int (*vop_gettype)(struct inode *node, uint32_t *type_store);<br />    int (*vop_tryseek)(struct inode *node, off_t pos);<br />    int (*vop_truncate)(struct inode *node, off_t len);<br />    int (*vop_create)(struct inode *node, const char *name, bool excl, struct inode **node_store);<br />    int (*vop_lookup)(struct inode *node, char *path, struct inode **node_store);<br />    int (*vop_ioctl)(struct inode *node, int op, void *data);</p>", "children": [{"uid": "i6t6y9snjx2", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T07:05:35Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p>SFS对上提供的接口&#xff0c;有文件操作和目录操作</p>\n<p>目录的操作&#xff1a;<br />sfs_opendir(struct inode *node, uint32_t open_flags)<br />sfs_close(struct inode *node)<br />sfs_fstat(struct inode *node, struct stat *stat)<br />sfs_fsync(struct inode *node)<br />sfs_namefile(struct inode *node, struct iobuf *iob)<br />sfs_getdirentry(struct inode *node, struct iobuf *iob) <br />sfs_reclaim(struct inode *node) <br />sfs_gettype(struct inode *node, uint32_t *type_store) <br />sfs_lookup(struct inode *node, char *path, struct inode **node_store) <br /><br />文件操作<br />sfs_openfile(struct inode *node, uint32_t open_flags) <br />sfs_close(struct inode *node)<br />sfs_read(struct inode *node, struct iobuf *iob) <br />sfs_write(struct inode *node, struct iobuf *iob)<br />sfs_fstat(struct inode *node, struct stat *stat)<br />sfs_fsync(struct inode *node)<br />sfs_reclaim(struct inode *node) <br />sfs_gettype(struct inode *node, uint32_t *type_store) <br />sfs_tryseek(struct inode *node, off_t pos) <br />sfs_truncfile(struct inode *node, off_t len)</p>\n<p></p>\n<p>其中有一些重复&#xff0c;因为目录也是一种文件&#xff0c;所以close等操作是相同的</p>", "children": [], "type": "feedback", "created": "2015-05-18T07:05:35Z", "id": "i9tjs1pim8y6us"}], "type": "followup", "no_answer": 1, "created": "2015-05-18T06:21:03Z", "id": "i9ti6s6lf2j4hb"}, {"no_upvotes": 0, "uid": "i6roqnlkmtw", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T06:21:21Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p>目录相关操作&#xff1a;</p>\n<p></p>\n<p>目录可以有两种表示方式&#xff1a;</p>\n<p>char*的纯字符目录名</p>\n<p>或者dirent结构&#xff08;位于libs/dirent.h&#xff09;&#xff0c;包括char*形式的路径名&#xff0c;以及offset</p>\n<p></p>\n<p>在sysfile.c中有&#xff1a;</p>\n<p>int sysfile_chdir(const char *__path)</p>\n<p>int sysfile_getcwd(char *buf, size_t len)</p>\n<p>int sysfile_getdirentry(int fd, struct dirent *__direntp)</p>\n<p>等操作&#xff0c;是与目录相关的操作</p>\n<p></p>\n<p>其中调用的底层目录操作函数在vfspath.c</p>\n<p>int vfs_chdir(char *path)</p>\n<p>int vfs_getcwd(struct iobuf *iob)</p>\n<p>int vfs_set_curdir(struct inode *dir)</p>\n<p>int vfs_get_curdir(struct inode **dir_store)</p>\n<p>int file_getdirentry(int fd, struct dirent *direntp)</p>\n<p></p>\n<p>更底层的调用在vfslookup.c</p>\n<p>int vfs_lookup(char *path, struct inode **node_store)</p>\n<p>是通过文件名path&#xff0c;寻找对应inode的函数</p>\n<p></p>\n<p>最底层的是一些vop操作&#xff0c;位于inode.h的inode_ops结构体中</p>\n<p>int (*vop_lookup)(struct inode *node, char *path, struct inode **node_store);</p>\n<p>在dev.c中被绑定到dev_lookup等设备相关的函数</p>", "children": [], "type": "followup", "no_answer": 1, "created": "2015-05-18T06:21:21Z", "id": "i9ti76b5xqs2ny"}, {"no_upvotes": 0, "uid": "hs2sszu8rbz6jj", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T06:33:09Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p></p><p>计13 张宏辉 2011011237</p>\n<p></p>\n<p>问题&#xff1a;文件系统中安装点支持哪些什么操作&#xff1f;</p>\n<p></p>\n<p>int vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store));</p>\n<p>int vfs_unmount(const char *devname);</p>\n<p>int vfs_unmount_all(void);</p>\n<p></p>", "children": [], "type": "followup", "no_answer": 1, "created": "2015-05-18T06:33:09Z", "id": "i9timcjpokj4wq"}, {"no_upvotes": 0, "uid": "hs2sszr363d6jd", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T06:34:25Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p>4楼就是所有的inode的操作</p>\n<p></p>", "children": [{"uid": "hs2sszr363d6jd", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T06:34:49Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p>2011011248</p>", "children": [], "type": "feedback", "created": "2015-05-18T06:34:49Z", "id": "i9tiohi75pr6iq"}], "type": "followup", "no_answer": 1, "created": "2015-05-18T06:34:25Z", "id": "i9tinzaensp6fj"}, {"no_upvotes": 0, "uid": "i718aanx0OS", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T07:23:10Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p>2012011359 路云飞</p>\n<p>https://github.com/december/os_exercises/blob/master/all/10-1-spoc-discussion.md</p>", "children": [{"uid": "i718aanx0OS", "bucket_name": "Today", "bucket_order": 2, "updated": "2015-05-18T11:04:35Z", "config": {}, "anon": "no", "data": {"embed_links": null}, "folders": [], "subject": "<p>错了……应该是https://github.com/december/os_exercises/blob/master/all/09-2-lab8-spoc-discussion.md</p>", "children": [], "type": "feedback", "created": "2015-05-18T11:04:35Z", "id": "i9tsbesvullb8"}], "type": "followup", "no_answer": 1, "created": "2015-05-18T07:23:10Z", "id": "i9tkentktov4s6"}], "request_instructor": 0, "tags": ["instructor-note", "课堂问答"], "s_edits": [], "num_favorites": 0}, "aid": "iajh7mctije4h1"}