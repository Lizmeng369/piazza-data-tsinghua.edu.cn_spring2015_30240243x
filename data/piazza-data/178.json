{"error": null, "result": {"nr": 178, "upvote_ids": [], "change_log": [{"when": "2015-03-25T13:42:59Z", "anon": "stud", "data": "i7os73vu9vtgo", "type": "create"}, {"uid": "hdjoucuyb836fq", "to": "i7os73vrfq0gn", "when": "2015-03-26T00:27:10Z", "anon": "no", "data": "i7pf7jevfpo7mr", "type": "i_answer"}, {"type": "i_answer_update", "when": "2015-03-26T00:40:14Z", "uid": "hdjoucuyb836fq", "data": "i7pfoc7gy315z9", "anon": "no"}], "q_edits": [], "i_edits": [], "unique_views": 87, "bookmarked": 5, "config": {}, "history": [{"subject": "逻辑/线性/物理地址  实在太太太难懂了", "content": "<p>请教几个问题&#xff1a;</p>\n<p></p>\n<p></p>\n<p>1。为什么要有KERNBASE = C0000000&#xff1f; 这个数有什么特殊意义吗&#xff1f;</p>\n<p></p>\n<p>2。既然&#xff1a;virt addr = linear addr = phy addr &#43; 0xC0000000&#xff0c;那么为什么ucore还需要页表和段表&#xff1f;想转的时候直接做一下加减法不就ok了&#xff1f;这个映射关系应该以后会随着页的alloc和free而变吧&#xff1f;</p>\n<p></p>\n<p>3。 实验指导书上写了lab2的实验过程&#xff1a;</p>\n<p></p>\n<ol><li>初始化物理内存页管理器框架pmm_manager&#xff1b;</li><li>建立空闲的page链表&#xff0c;这样就可以分配以页&#xff08;4KB&#xff09;为单位的空闲内存了&#xff1b;</li><li>检查物理内存页分配算法&#xff1b;</li><li>为确保切换到分页机制后&#xff0c;代码能够正常执行&#xff0c;先建立一个临时二级页表&#xff1b;</li><li>建立一一映射关系的二级页表&#xff1b;</li><li>使能分页机制&#xff1b;</li><li>从新设置全局段描述符表&#xff1b;</li><li>取消临时二级页表&#xff1b;</li><li>检查页表建立是否正确</li></ol>\n<p></p>\n<p>     求解释&#xff1a;</p>\n<p>     &#xff08;1&#xff09;第4、5步的临时页表和一一映射的页表&#xff0c;是同一个吗&#xff1f;</p>\n<p></p>\n<p>      &#xff08;2&#xff09;第7步的目的是什么&#xff1f;</p>\n<p></p>\n<p>      &#xff08;3&#xff09;第8步的目的是什么&#xff1f;</p>\n<p></p>\n<p>      &#xff08;4&#xff09;第8步取消了临时二级页表&#xff0c;那第9步检查的是啥&#xff1f;</p>", "created": "2015-03-25T13:42:59Z", "anon": "stud"}], "data": {"embed_links": []}, "request_instructor_me": false, "folders": ["lab2"], "type": "question", "tag_good": [], "no_answer": 0, "created": "2015-03-25T13:42:59Z", "t": 1433500166652, "id": "i7os73vrfq0gn", "status": "active", "tag_good_arr": [], "default_anonymity": "no", "my_favorite": false, "bucket_order": 2, "is_bookmarked": false, "is_tag_good": false, "bucket_name": "Today", "no_answer_followup": 0, "children": [{"folders": [], "bucket_order": 2, "config": {}, "history": [{"subject": "", "content": "<p>1、KERNBASE只是人为规定而已。内核需要将所有内存映射到所有进程的虚拟地址空间&#xff0c;这样进程在发起系统调用进入内核时不需要更换页表。ucore选择将内存映射到虚拟地址空间的高位&#xff08;KERNBASE以上&#xff09;&#xff0c;使得应用程序可用的虚拟地址空间仍然从0开始。至于选择0xC0000000还是0xDEADBEEF&#xff0c;只是实现时的一个取值而已。</p>\n<p></p>\n<p>2、virt addr = phy addr &#43; 0xC0000000只对内存的一一映射成立&#xff0c;每个进程所用的物理内存则是按需分配&#xff0c;虚拟地址和物理地址之间没有固定的规则&#xff0c;因此仍然需要页表进行地址转换&#xff0c;更何况页表还有权限管理的功能。至于段表&#xff0c;由于页表在内存管理上已提供了足够的能力&#xff0c;很少有系统再使用段表了&#xff1b;但是x86系统上没有办法在使能页表的同时禁用段表&#xff0c;所以段表被设置成永远进行一一映射&#xff0c;也就是virt addr = linear addr。</p>\n<p></p>\n<p>3、关于这个过程&#xff0c;首先需要清楚“页表”和“二级页表”指的是不同的东西&#xff0c;“临时二级页表”不是“二级页表”&#xff0c;“检查页表”也不是“检查二级页表”&#xff0c;混淆这两个概念的话&#xff0c;很多步骤是看不明白的。其次&#xff0c;是清楚ucore最终使用x86 CPU段页式内存管理的方式&#xff0c;是virt addr = linear addr = phy addr &#43; 0xC0000000&#xff08;也就是只用页表&#xff09;。由于CPU刚进入保护模式时的状态是启用了段表&#xff0c;没有启用页表&#xff0c;所以ucore需要对CPU的内存管理进行细致的配置&#xff0c;才能达到virt addr = linear addr = phy addr &#43; 0xC0000000的目标&#xff0c;而这些配置就是lab2中所涉及的内容。</p>\n<p></p>\n<p>另外附上<a href=\"https://www.cs.rutgers.edu/~pxk/416/notes/10-paging.html\">https://www.cs.rutgers.edu/~pxk/416/notes/10-paging.html</a>里找到的x86_32段页式管理的图示。</p>\n<p></p>\n<p><img src=\"https://d1b10bmlvqabco.cloudfront.net/attach/i5j09fnsl7k5x0/hdjoucuyb836fq/i7pfo7nhdgpp/09aia32seg_paging.png\" /></p>", "created": "2015-03-26T00:40:14Z", "uid": "hdjoucuyb836fq", "anon": "no"}, {"subject": "", "content": "<p>1、KERNBASE只是人为规定而已。内核需要将所有内存映射到所有进程的虚拟地址空间&#xff0c;这样进程在发起系统调用进入内核时不需要更换页表。ucore选择将内存映射到虚拟地址空间的高位&#xff08;KERNBASE以上&#xff09;&#xff0c;使得应用程序可用的虚拟地址空间仍然从0开始。至于选择0xC0000000还是0xDEADBEEF&#xff0c;只是实现时的一个取值而已。</p>\n<p></p>\n<p>2、virt addr = phy addr &#43; 0xC0000000只对内存的一一映射成立&#xff0c;每个进程所用的物理内存则是按需分配&#xff0c;虚拟地址和物理地址之间没有固定的规则&#xff0c;因此仍然需要页表进行地址转换&#xff0c;更何况页表还有权限管理的功能。至于段表&#xff0c;由于页表在内存管理上已提供了足够的能力&#xff0c;很少有系统再使用段表了&#xff1b;但是x86系统上没有办法在使能页表的同时禁用段表&#xff0c;所以段表被设置成永远进行一一映射&#xff0c;也就是virt addr = linear addr。</p>\n<p></p>\n<p>3、关于这个过程&#xff0c;首先需要清楚“页表”和“二级页表”指的是不同的东西&#xff0c;“临时二级页表”不是“二级页表”&#xff0c;“检查页表”也不是“检查二级页表”&#xff0c;混淆这两个概念的话&#xff0c;很多步骤是看不明白的。其次&#xff0c;是清楚ucore最终使用x86 CPU段页式内存管理的方式&#xff0c;是virt addr = linear addr = phy addr &#43; 0xC0000000&#xff08;也就是只用页表&#xff09;。由于CPU刚进入保护模式时的状态是启用了段表&#xff0c;没有启用页表&#xff0c;所以ucore需要对CPU的内存管理进行细致的配置&#xff0c;才能达到virt addr = linear addr = phy addr &#43; 0xC0000000的目标&#xff0c;而这些配置就是lab2中所涉及的内容。</p>", "created": "2015-03-26T00:27:10Z", "uid": "hdjoucuyb836fq", "anon": "no"}], "data": {"embed_links": []}, "bucket_name": "Today", "is_tag_endorse": false, "children": [], "tag_endorse": [{"class_sections": ["课程设计_i5j09fnsl7k5x0"], "admin": true, "role": "ta", "facebook_id": null, "us": false, "name": "Object Ho", "id": "hsfa0sawctb6v4", "photo": null}, {"admin": false, "role": "student", "facebook_id": null, "us": false, "name": "郭子雷", "id": "i78odcf1aiM", "photo": null}, {"admin": false, "role": "student", "facebook_id": null, "us": false, "name": "MoXiGeTuFei", "id": "i71i9kso8Gp", "photo": null}], "tag_endorse_arr": ["hsfa0sawctb6v4", "i78odcf1aiM", "i71i9kso8Gp"], "created": "2015-03-26T00:27:10Z", "id": "i7pf7jeembn7mq", "type": "i_answer"}], "request_instructor": 0, "tags": ["lab2", "student"], "s_edits": [], "num_favorites": 2}, "aid": "iajgzjlo8xl3cp"}