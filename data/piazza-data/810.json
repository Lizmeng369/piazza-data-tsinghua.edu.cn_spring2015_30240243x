{"aid": "in65ty63lwn2ut", "result": {"folders": ["lecture15", "课堂问答"], "unique_views": 37, "request_instructor_me": false, "change_log": [{"data": "in5kg8wilbs3ru", "anon": "no", "when": "2016-04-18T05:33:48Z", "uid": "i0c9nvk0xzc2n3", "type": "create"}, {"data": "in5ki461qty67b", "anon": "no", "when": "2016-04-18T05:35:15Z", "uid": "i0c9nvk0xzc2n3", "type": "update"}, {"to": "in5kg8wgluf3rt", "anon": "no", "when": "2016-04-18T07:48:56Z", "uid": "i0f24oie8102cr", "type": "followup"}, {"to": "in5kg8wgluf3rt", "anon": "no", "when": "2016-04-18T09:59:48Z", "uid": "i0c9nvk0xzc2n3", "type": "feedback"}], "upvote_ids": [], "id": "in5kg8wgluf3rt", "bookmarked": 4, "no_answer_followup": 1, "i_edits": [], "is_bookmarked": false, "children": [{"folders": [], "updated": "2016-04-18T07:48:56Z", "no_upvotes": 0, "uid": "i0f24oie8102cr", "created": "2016-04-18T07:48:56Z", "type": "followup", "d-bucket": "Yesterday", "id": "in5pa0rokgy3w6", "anon": "no", "bucket_name": "Yesterday", "no_answer": 1, "config": {}, "bucket_order": 3, "data": null, "children": [{"folders": [], "updated": "2016-04-18T09:59:48Z", "uid": "i0c9nvk0xzc2n3", "created": "2016-04-18T09:59:48Z", "type": "feedback", "d-bucket": "Yesterday", "id": "in5tybt1z504in", "anon": "no", "bucket_name": "Yesterday", "config": {}, "bucket_order": 3, "data": null, "children": [], "subject": "<p>自己看论文去</p>"}], "subject": "<p>虽然还是不懂&#xff0c;但是赞一个&#xff0c;求举例</p>"}], "nr": 810, "bucket_order": 2, "config": {}, "status": "active", "tags": ["lecture15", "student", "unanswered", "课堂问答"], "num_favorites": 0, "bucket_name": "Today", "q_edits": [], "data": {"embed_links": []}, "request_instructor": 0, "created": "2016-04-18T05:33:48Z", "is_tag_good": false, "type": "note", "s_edits": [], "my_favorite": false, "default_anonymity": "no", "t": 1460993539899, "tag_good": [{"name": "叶子鹏", "admin": false, "photo": null, "us": false, "email": "775193759@qq.com", "class_sections": ["清华学生_i5j09fnsl7k5x0"], "role": "student", "facebook_id": null, "id": "i0f24oie8102cr"}, {"admin_permission": 10, "admin": true, "photo": null, "us": false, "email": "xyong@tsinghua.edu.cn", "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0"], "role": "instructor", "facebook_id": null, "id": "hdjonbiyfs62ie", "name": "Yong XIANG"}, {"name": "suanrong", "admin": false, "photo": "1416753618_35.png", "us": false, "email": "yaoxr13@mails.tsinghua.edu.cn", "class_sections": ["清华学生_i5j09fnsl7k5x0"], "role": "student", "facebook_id": null, "id": "i0c9nvk0xzc2n3"}], "tag_good_arr": ["i0c9nvk0xzc2n3", "i0f24oie8102cr", "hdjonbiyfs62ie"], "history": [{"content": "<p>参考&#xff1a;</p>\n<p> <a href=\"http://www.csie.ntu.edu.tw/~r95093/papers/Priority%20Inheritance%20Protocols%20An%20Approach%20to%20Real-Time%20Synchronization.pdf\">&#34;Priority Inheritance Protocols: An Approach to Real-Time Synchronization&#34;</a></p>\n<p><a href=\"http://www.embedded.com/design/configurable-systems/4024970/How-to-use-priority-inheritance\" target=\"_blank\"> &#34;how to use priority inheritance&#34;</a></p>\n<p></p>\n<p>首先让我来定义一下几个概念&#xff08;自己乱定的&#xff09;&#xff1a;</p>\n<p></p>\n<p>资源S&#xff1a;一个抽象概念&#xff0c;任何时候下&#xff0c;一个资源最多属于一个进程。若资源不属于任何继承&#xff0c;则称该资源为自由的。进程只会主动释放资源。&#xff08;其实就是锁&#xff09;</p>\n<p></p>\n<p>进程 J 申请资源S&#xff1a;进程 J 申请获得资源S。</p>\n<p></p>\n<p>进程 J 被进程 J‘  阻塞&#xff1a;进程 J 需要获得某资源S后&#xff0c;才能继续执行&#xff0c;但是现在资源S属于进程J’&#xff0c;所以进程J进入等待状态。</p>\n<p></p>\n<p>所运行的系统是一个基于优先级的单处理机抢占系统。</p>\n<p></p>\n<p>优先级继承&#xff1a;</p>\n<p>    </p>\n<p>     当进程A 把进程B 阻塞&#xff0c;且进程A的优先级比较高时&#xff0c;把进程 B 的优先级提升到与A一样的优先级。</p>\n<p></p>\n<p>优先级天花板&#xff1a;</p>\n<p></p>\n<p>     这个算法有两种&#xff0c;分别是<b>Original Ceiling Priority Protocol</b> (OCPP) and <b>Immediate Ceiling Priority Protocol</b> (ICPP)。向勇老师上课说的天花板算法&#xff0c;应该是OCPP。</p>\n<p>     </p>\n<p>     定义每一个资源S的天花板优先级&#xff1a;可能申请获得该资源的所有进程中&#xff0c;优先级最大的进程的优先级。</p>\n<p></p>\n<p>     ICPP&#xff1a;</p>\n<p>             当一个进程获得某资源后&#xff0c;优先级上升成该资源的天花板优先级。</p>\n<p></p>\n<p>     OCPP&#xff1a;</p>\n<p>             当进程A 因为资源S&#xff0c;把进程B 阻塞时&#xff0c;进程A的优先级上升成资源S的天花板优先级。</p>\n<p></p>\n<p>             并且一个进程A在申请获得某资源时&#xff0c;必须满足自身优先级高于所有的、不是自由的资源的天花板优先级&#xff0c;若不满足&#xff0c;即存在某资源S被另一进程B占有&#xff0c;且该资源S的天花板优先级高于进程A的优先级&#xff0c;则把进程B的优先级升到进程A的优先级&#xff0c;并且执行进程B&#xff0c;进程A进入等待&#xff0c;没有申请到资源S。</p>\n<p></p>\n<p>             至于资源S的天花板优先级怎么知道&#xff0c;即如何知道哪些进程有可能会使用这个资源&#xff0c;直接看看每个进程的代码就知道啦啦啦~&#xff08;需要静态分析&#xff0c;听起来就工作量很大&#xff09;</p>\n<p></p>\n<p>瞎比比了这么多&#xff0c;让我们来脑补一下这些算法的优缺点。</p>\n<p></p>\n<p>优先级继承&#xff1a;额外开销适不多&#xff0c;有死锁。</p>\n<p></p>\n<p>ICPP&#xff1a;额外开销应该最多&#xff0c;没有死锁。</p>\n<p></p>\n<p>OCPP: 额外开销比ICPP少&#xff0c;也没有死锁。</p>\n<p></p>\n<p>至于响应时间、等待时间&#xff0c;分析起来比较麻烦&#xff0c;还要分平均情况&#xff0c;最坏情况&#xff0c;我不写了。</p>\n<p>     </p>\n<p>至于死锁&#xff0c;老师上课没说&#xff0c;那我也不整理了&#xff0c;大家YY一下吧&#xff0c;OCPP后面那一坨就是为了没有死锁。</p>\n<p></p>\n<p>对了&#xff0c;临界区就是critical section [会心一笑]。</p>\n<p></p>\n<p></p>", "anon": "no", "subject": "优先级继承 和 优先级天花板 算法的解释", "uid": "i0c9nvk0xzc2n3", "created": "2016-04-18T05:35:15Z"}, {"content": "<p>参考&#xff1a;</p>\n<p> <a href=\"http://www.csie.ntu.edu.tw/~r95093/papers/Priority%20Inheritance%20Protocols%20An%20Approach%20to%20Real-Time%20Synchronization.pdf\">&#34;Priority Inheritance Protocols: An Approach to Real-Time Synchronization&#34;</a></p>\n<p><a href=\"http://www.embedded.com/design/configurable-systems/4024970/How-to-use-priority-inheritance\" target=\"_blank\"> &#34;how to use priority inheritance&#34;</a></p>\n<p></p>\n<p>首先让我来定义一下几个概念&#xff08;自己乱定的&#xff09;&#xff1a;</p>\n<p></p>\n<p>资源S&#xff1a;一个抽象概念&#xff0c;任何时候下&#xff0c;一个资源最多属于一个进程。若资源不属于任何继承&#xff0c;则称该资源为自由的。进程只会主动释放资源。&#xff08;其实就是锁&#xff09;</p>\n<p></p>\n<p>进程 J 申请资源S&#xff1a;进程 J 申请获得资源S。</p>\n<p></p>\n<p>进程 J 被进程 J‘  阻塞&#xff1a;进程 J 需要获得某资源S后&#xff0c;才能继续执行&#xff0c;但是现在资源S属于进程J’&#xff0c;所以进程J进入等待状态。</p>\n<p></p>\n<p>所运行的系统是一个基于优先级的单处理机抢占系统。</p>\n<p></p>\n<p>优先级继承&#xff1a;</p>\n<p>    </p>\n<p>     当进程A 把进程B 阻塞&#xff0c;且进程A的优先级比较高时&#xff0c;把进程 B 的优先级提升到与A一样的优先级。</p>\n<p></p>\n<p>优先级天花板&#xff1a;</p>\n<p></p>\n<p>     这个算法有两种&#xff0c;分别是<b>Original Ceiling Priority Protocol</b> (OCPP) and <b>Immediate Ceiling Priority Protocol</b> (ICPP)。向勇老师上课说的天花板算法&#xff0c;应该是OCPP。</p>\n<p>     </p>\n<p>     定义每一个资源S的天花板优先级&#xff1a;可能申请获得该资源的所有进程中&#xff0c;优先级最大的进程的优先级。</p>\n<p></p>\n<p>     ICPP&#xff1a;</p>\n<p>             当一个进程获得某资源后&#xff0c;优先级上升成该资源的天花板优先级。</p>\n<p></p>\n<p>     OCPP&#xff1a;</p>\n<p>             当进程A 因为资源S&#xff0c;把进程B 阻塞时&#xff0c;进程A的优先级上升成资源S的天花板优先级。</p>\n<p></p>\n<p>             并且一个进程A在申请获得某资源时&#xff0c;必须满足自身优先级高于所有的、不是自由的资源的天花板优先级&#xff0c;若不满足&#xff0c;即存在某资源S被另一进程B占有&#xff0c;且该资源S的天花板优先级高于进程A的优先级&#xff0c;则把进程B的优先级升到进程A的优先级&#xff0c;并且执行进程B&#xff0c;进程A进入等待&#xff0c;没有申请到资源S。</p>\n<p></p>\n<p>             至于资源S的天花板优先级怎么知道&#xff0c;即如何知道哪些进程有可能会使用这个资源&#xff0c;直接看看每个进程的代码就知道啦啦啦~&#xff08;需要静态分析&#xff0c;听起来就工作量很大&#xff09;</p>\n<p></p>\n<p>瞎比比了这么多&#xff0c;让我们来脑补一下这些算法的优缺点。</p>\n<p></p>\n<p>优先级继承&#xff1a;额外开销适不多&#xff0c;有死锁。</p>\n<p></p>\n<p>ICPP&#xff1a;额外开销应该最多&#xff0c;没有死锁。</p>\n<p></p>\n<p>OCPP: 额外开销比ICPP少&#xff0c;也没有死锁。</p>\n<p></p>\n<p>至于响应时间、等待时间&#xff0c;分析起来比较麻烦&#xff0c;还要分平均情况&#xff0c;最坏情况&#xff0c;我不写了。</p>\n<p>     </p>\n<p>至于死锁&#xff0c;老师上课没说&#xff0c;那我也不整理了&#xff0c;大家YY一下吧&#xff0c;OCPP后面那一坨就是为了没有死锁。</p>\n<p></p>\n<p>对了&#xff0c;临界区就是critical section [会心一笑]。</p>\n<p></p>\n<p></p>", "anon": "no", "subject": "优先级继承 和 优先级天花板 算法的解释", "uid": "i0c9nvk0xzc2n3", "created": "2016-04-18T05:33:48Z"}]}, "error": null}