{"aid": "inj0qrf94bh3h6", "result": {"folders": ["lecture17"], "unique_views": 36, "request_instructor_me": false, "change_log": [{"data": "inimfhcntur5jp", "anon": "no", "when": "2016-04-27T08:50:12Z", "uid": "i0zaci5voig5h", "type": "create"}, {"data": "inimikgksi1bp", "anon": "no", "when": "2016-04-27T08:52:36Z", "uid": "i0zaci5voig5h", "type": "update"}], "upvote_ids": [], "id": "inimfhckvoy5jo", "bookmarked": 3, "no_answer_followup": 0, "i_edits": [], "is_bookmarked": false, "children": [], "nr": 840, "bucket_order": 2, "config": {}, "status": "active", "tags": ["lecture17", "student"], "num_favorites": 0, "bucket_name": "Today", "q_edits": [], "data": {"embed_links": []}, "request_instructor": 0, "created": "2016-04-27T08:50:12Z", "is_tag_good": false, "type": "note", "s_edits": [], "my_favorite": false, "default_anonymity": "no", "t": 1461771053397, "tag_good": [], "tag_good_arr": [], "history": [{"content": "<p>今天向勇老师课上讲了esienberg算法当时给出的测试用例不够完整</p>\n<p>后来我和朱俸民修改了上次的代码&#xff1a;</p>\n<p><a href=\"https://github.com/paulzfm/os_course_spoc_exercises/blob/master/SPOC17/esienberg.cpp\" target=\"_blank\">https://github.com/paulzfm/os_course_spoc_exercises/blob/master/SPOC17/esienberg.cpp</a></p>\n<p></p>\n<p>主要的修改&#xff1a;</p>\n<p>首先读入只需要读入一个数字n&#xff0c;表示总共的线程数</p>\n<p></p>\n<p>在模拟器外层增加了一个深度优先搜索的调用&#xff0c;这个调用的目的是暴力枚举所有的运行可能</p>\n<p></p>\n<p>然后为了输出更方便观察&#xff0c;我们将原来三个输出变成了一个调用接口runcheck&#xff0c;runcheck的主要功能是观察当前这个运行是否合理&#xff0c;如果不合理就输出error并直接退出程序。</p>\n<p></p>\n<p>然后在深度优先搜索枚举的时候进行了现场的保存和读取&#xff0c;这样使枚举的效率提高一些</p>\n<p></p>\n<p>我试了n=1,2,3,4,5,6,7,8,9,10十种输出&#xff0c;输出都是OK&#xff08;即程序正常结束&#xff09;&#xff0c;理论上来说可以证明该算法是正确的&#xff08;简单的说&#xff0c;当n大于3时&#xff0c;可以用数学归纳法证明简单证明其正确性&#xff09;</p>\n<p></p>\n<p>唯一不足的可能就是王启圣同学指出的&#xff0c;我对语句的分割可能会有不正确&#xff08;即一句C&#43;&#43;可能对应多句指令或原子操作&#xff0c;但我这里没有进行分割&#xff09;&#xff0c;如果有这类问题或其他问题&#xff0c;欢迎指出&#xff01;</p>", "anon": "no", "subject": "SPOC17中esienberg算法的完整测试用例尝试", "uid": "i0zaci5voig5h", "created": "2016-04-27T08:52:36Z"}, {"content": "<p>今天向勇老师课上讲了esienberg算法当时给出的测试用例不够完整&#xff08;为了抢优先&#xff09;</p>\n<p>后来我和朱俸民修改了上次的代码&#xff1a;</p>\n<p><a href=\"https://github.com/paulzfm/os_course_spoc_exercises/blob/master/SPOC17/esienberg.cpp\" target=\"_blank\">https://github.com/paulzfm/os_course_spoc_exercises/blob/master/SPOC17/esienberg.cpp</a></p>\n<p></p>\n<p>主要的修改&#xff1a;</p>\n<p>首先读入只需要读入一个数字n&#xff0c;表示总共的线程数</p>\n<p></p>\n<p>在模拟器外层增加了一个深度优先搜索的调用&#xff0c;这个调用的目的是暴力枚举所有的运行可能</p>\n<p></p>\n<p>然后为了输出更方便观察&#xff0c;我们将原来三个输出变成了一个调用接口runcheck&#xff0c;runcheck的主要功能是观察当前这个运行是否合理&#xff0c;如果不合理就输出error并直接退出程序。</p>\n<p></p>\n<p>然后在深度优先搜索枚举的时候进行了现场的保存和读取&#xff0c;这样使枚举的效率提高一些</p>\n<p></p>\n<p>我试了n=1,2,3,4,5,6,7,8,9,10十种输出&#xff0c;输出都是OK&#xff08;即程序正常结束&#xff09;&#xff0c;理论上来说可以证明该算法是正确的&#xff08;简单的说&#xff0c;当n大于3时&#xff0c;可以用数学归纳法证明简单证明其正确性&#xff09;</p>\n<p></p>\n<p>唯一不足的可能就是王启圣同学指出的&#xff0c;我对语句的分割可能会有不正确&#xff08;即一句C&#43;&#43;可能对应多句指令或原子操作&#xff0c;但我这里没有进行分割&#xff09;&#xff0c;如果有这类问题或其他问题&#xff0c;欢迎指出&#xff01;</p>", "anon": "no", "subject": "SPOC17中esienberg算法的完整测试用例尝试", "uid": "i0zaci5voig5h", "created": "2016-04-27T08:50:12Z"}]}, "error": null}